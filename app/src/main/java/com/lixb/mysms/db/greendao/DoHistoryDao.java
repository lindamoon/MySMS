package com.lixb.mysms.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lixb.mysms.entity.DoHistory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DO_HISTORY".
*/
public class DoHistoryDao extends AbstractDao<DoHistory, Long> {

    public static final String TABLENAME = "DO_HISTORY";

    /**
     * Properties of entity DoHistory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "USER_ID");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property TaskIdStr = new Property(3, String.class, "taskIdStr", false, "TASK_ID_STR");
        public final static Property TaskTitle = new Property(4, String.class, "taskTitle", false, "TASK_TITLE");
        public final static Property CompletedDate = new Property(5, java.util.Date.class, "completedDate", false, "COMPLETED_DATE");
    }


    public DoHistoryDao(DaoConfig config) {
        super(config);
    }
    
    public DoHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DO_HISTORY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"USER_NAME\" TEXT," + // 2: userName
                "\"TASK_ID_STR\" TEXT," + // 3: taskIdStr
                "\"TASK_TITLE\" TEXT," + // 4: taskTitle
                "\"COMPLETED_DATE\" INTEGER);"); // 5: completedDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DO_HISTORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DoHistory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String taskIdStr = entity.getTaskIdStr();
        if (taskIdStr != null) {
            stmt.bindString(4, taskIdStr);
        }
 
        String taskTitle = entity.getTaskTitle();
        if (taskTitle != null) {
            stmt.bindString(5, taskTitle);
        }
 
        java.util.Date completedDate = entity.getCompletedDate();
        if (completedDate != null) {
            stmt.bindLong(6, completedDate.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DoHistory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String taskIdStr = entity.getTaskIdStr();
        if (taskIdStr != null) {
            stmt.bindString(4, taskIdStr);
        }
 
        String taskTitle = entity.getTaskTitle();
        if (taskTitle != null) {
            stmt.bindString(5, taskTitle);
        }
 
        java.util.Date completedDate = entity.getCompletedDate();
        if (completedDate != null) {
            stmt.bindLong(6, completedDate.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DoHistory readEntity(Cursor cursor, int offset) {
        DoHistory entity = new DoHistory( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // taskIdStr
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // taskTitle
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)) // completedDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DoHistory entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTaskIdStr(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTaskTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCompletedDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DoHistory entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DoHistory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DoHistory entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
