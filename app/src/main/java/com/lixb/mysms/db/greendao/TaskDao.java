package com.lixb.mysms.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lixb.mysms.entity.enums.Priority;
import com.lixb.mysms.entity.enums.PriorityConverter;
import com.lixb.mysms.entity.enums.TaskStatus;
import com.lixb.mysms.entity.enums.TaskStatusConverter;

import com.lixb.mysms.entity.Task;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASK".
*/
public class TaskDao extends AbstractDao<Task, Long> {

    public static final String TABLENAME = "TASK";

    /**
     * Properties of entity Task.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TaskIdStr = new Property(1, String.class, "taskIdStr", false, "TASK_ID_STR");
        public final static Property UserId = new Property(2, long.class, "userId", false, "USER_ID");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(4, String.class, "description", false, "DESCRIPTION");
        public final static Property TaskStatus = new Property(5, Integer.class, "taskStatus", false, "TASK_STATUS");
        public final static Property IsSubTask = new Property(6, boolean.class, "isSubTask", false, "IS_SUB_TASK");
        public final static Property ParentId = new Property(7, long.class, "parentId", false, "PARENT_ID");
        public final static Property Priority = new Property(8, Integer.class, "priority", false, "PRIORITY");
        public final static Property StartDate = new Property(9, java.util.Date.class, "startDate", false, "START_DATE");
        public final static Property DeadLine = new Property(10, java.util.Date.class, "deadLine", false, "DEAD_LINE");
        public final static Property CompleteDate = new Property(11, java.util.Date.class, "completeDate", false, "COMPLETE_DATE");
        public final static Property CompleteSpendTime = new Property(12, long.class, "completeSpendTime", false, "COMPLETE_SPEND_TIME");
        public final static Property CreateDate = new Property(13, java.util.Date.class, "createDate", false, "CREATE_DATE");
        public final static Property LastOperateDate = new Property(14, java.util.Date.class, "lastOperateDate", false, "LAST_OPERATE_DATE");
        public final static Property Score = new Property(15, byte.class, "score", false, "SCORE");
    }

    private DaoSession daoSession;

    private final TaskStatusConverter taskStatusConverter = new TaskStatusConverter();
    private final PriorityConverter priorityConverter = new PriorityConverter();

    public TaskDao(DaoConfig config) {
        super(config);
    }
    
    public TaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TASK_ID_STR\" TEXT UNIQUE ," + // 1: taskIdStr
                "\"USER_ID\" INTEGER NOT NULL ," + // 2: userId
                "\"TITLE\" TEXT," + // 3: title
                "\"DESCRIPTION\" TEXT," + // 4: description
                "\"TASK_STATUS\" INTEGER," + // 5: taskStatus
                "\"IS_SUB_TASK\" INTEGER NOT NULL ," + // 6: isSubTask
                "\"PARENT_ID\" INTEGER NOT NULL ," + // 7: parentId
                "\"PRIORITY\" INTEGER," + // 8: priority
                "\"START_DATE\" INTEGER," + // 9: startDate
                "\"DEAD_LINE\" INTEGER," + // 10: deadLine
                "\"COMPLETE_DATE\" INTEGER," + // 11: completeDate
                "\"COMPLETE_SPEND_TIME\" INTEGER NOT NULL ," + // 12: completeSpendTime
                "\"CREATE_DATE\" INTEGER," + // 13: createDate
                "\"LAST_OPERATE_DATE\" INTEGER," + // 14: lastOperateDate
                "\"SCORE\" INTEGER NOT NULL );"); // 15: score
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Task entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String taskIdStr = entity.getTaskIdStr();
        if (taskIdStr != null) {
            stmt.bindString(2, taskIdStr);
        }
        stmt.bindLong(3, entity.getUserId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(5, description);
        }
 
        TaskStatus taskStatus = entity.getTaskStatus();
        if (taskStatus != null) {
            stmt.bindLong(6, taskStatusConverter.convertToDatabaseValue(taskStatus));
        }
        stmt.bindLong(7, entity.getIsSubTask() ? 1L: 0L);
        stmt.bindLong(8, entity.getParentId());
 
        Priority priority = entity.getPriority();
        if (priority != null) {
            stmt.bindLong(9, priorityConverter.convertToDatabaseValue(priority));
        }
 
        java.util.Date startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindLong(10, startDate.getTime());
        }
 
        java.util.Date deadLine = entity.getDeadLine();
        if (deadLine != null) {
            stmt.bindLong(11, deadLine.getTime());
        }
 
        java.util.Date completeDate = entity.getCompleteDate();
        if (completeDate != null) {
            stmt.bindLong(12, completeDate.getTime());
        }
        stmt.bindLong(13, entity.getCompleteSpendTime());
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(14, createDate.getTime());
        }
 
        java.util.Date lastOperateDate = entity.getLastOperateDate();
        if (lastOperateDate != null) {
            stmt.bindLong(15, lastOperateDate.getTime());
        }
        stmt.bindLong(16, entity.getScore());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Task entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String taskIdStr = entity.getTaskIdStr();
        if (taskIdStr != null) {
            stmt.bindString(2, taskIdStr);
        }
        stmt.bindLong(3, entity.getUserId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(5, description);
        }
 
        TaskStatus taskStatus = entity.getTaskStatus();
        if (taskStatus != null) {
            stmt.bindLong(6, taskStatusConverter.convertToDatabaseValue(taskStatus));
        }
        stmt.bindLong(7, entity.getIsSubTask() ? 1L: 0L);
        stmt.bindLong(8, entity.getParentId());
 
        Priority priority = entity.getPriority();
        if (priority != null) {
            stmt.bindLong(9, priorityConverter.convertToDatabaseValue(priority));
        }
 
        java.util.Date startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindLong(10, startDate.getTime());
        }
 
        java.util.Date deadLine = entity.getDeadLine();
        if (deadLine != null) {
            stmt.bindLong(11, deadLine.getTime());
        }
 
        java.util.Date completeDate = entity.getCompleteDate();
        if (completeDate != null) {
            stmt.bindLong(12, completeDate.getTime());
        }
        stmt.bindLong(13, entity.getCompleteSpendTime());
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(14, createDate.getTime());
        }
 
        java.util.Date lastOperateDate = entity.getLastOperateDate();
        if (lastOperateDate != null) {
            stmt.bindLong(15, lastOperateDate.getTime());
        }
        stmt.bindLong(16, entity.getScore());
    }

    @Override
    protected final void attachEntity(Task entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Task readEntity(Cursor cursor, int offset) {
        Task entity = new Task( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // taskIdStr
            cursor.getLong(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // description
            cursor.isNull(offset + 5) ? null : taskStatusConverter.convertToEntityProperty(cursor.getInt(offset + 5)), // taskStatus
            cursor.getShort(offset + 6) != 0, // isSubTask
            cursor.getLong(offset + 7), // parentId
            cursor.isNull(offset + 8) ? null : priorityConverter.convertToEntityProperty(cursor.getInt(offset + 8)), // priority
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // startDate
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // deadLine
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // completeDate
            cursor.getLong(offset + 12), // completeSpendTime
            cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)), // createDate
            cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)), // lastOperateDate
            (byte) cursor.getShort(offset + 15) // score
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Task entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTaskIdStr(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.getLong(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDescription(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTaskStatus(cursor.isNull(offset + 5) ? null : taskStatusConverter.convertToEntityProperty(cursor.getInt(offset + 5)));
        entity.setIsSubTask(cursor.getShort(offset + 6) != 0);
        entity.setParentId(cursor.getLong(offset + 7));
        entity.setPriority(cursor.isNull(offset + 8) ? null : priorityConverter.convertToEntityProperty(cursor.getInt(offset + 8)));
        entity.setStartDate(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setDeadLine(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setCompleteDate(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setCompleteSpendTime(cursor.getLong(offset + 12));
        entity.setCreateDate(cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)));
        entity.setLastOperateDate(cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)));
        entity.setScore((byte) cursor.getShort(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Task entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Task entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Task entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
