package com.lixb.mysms.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lixb.mysms.entity.enums.RepeatMode;
import com.lixb.mysms.entity.enums.RepeatModeConverter;

import com.lixb.mysms.entity.RepeatTaskInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REPEAT_TASK_INFO".
*/
public class RepeatTaskInfoDao extends AbstractDao<RepeatTaskInfo, Long> {

    public static final String TABLENAME = "REPEAT_TASK_INFO";

    /**
     * Properties of entity RepeatTaskInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TaskIdStr = new Property(1, String.class, "taskIdStr", false, "TASK_ID_STR");
        public final static Property RepeatMode = new Property(2, Integer.class, "repeatMode", false, "REPEAT_MODE");
        public final static Property RepeatStrategy = new Property(3, String.class, "repeatStrategy", false, "REPEAT_STRATEGY");
        public final static Property RepeatCount = new Property(4, long.class, "repeatCount", false, "REPEAT_COUNT");
        public final static Property LastCompletedDate = new Property(5, java.util.Date.class, "lastCompletedDate", false, "LAST_COMPLETED_DATE");
    }

    private final RepeatModeConverter repeatModeConverter = new RepeatModeConverter();

    public RepeatTaskInfoDao(DaoConfig config) {
        super(config);
    }
    
    public RepeatTaskInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REPEAT_TASK_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TASK_ID_STR\" TEXT," + // 1: taskIdStr
                "\"REPEAT_MODE\" INTEGER," + // 2: repeatMode
                "\"REPEAT_STRATEGY\" TEXT," + // 3: repeatStrategy
                "\"REPEAT_COUNT\" INTEGER NOT NULL ," + // 4: repeatCount
                "\"LAST_COMPLETED_DATE\" INTEGER);"); // 5: lastCompletedDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REPEAT_TASK_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RepeatTaskInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String taskIdStr = entity.getTaskIdStr();
        if (taskIdStr != null) {
            stmt.bindString(2, taskIdStr);
        }
 
        RepeatMode repeatMode = entity.getRepeatMode();
        if (repeatMode != null) {
            stmt.bindLong(3, repeatModeConverter.convertToDatabaseValue(repeatMode));
        }
 
        String repeatStrategy = entity.getRepeatStrategy();
        if (repeatStrategy != null) {
            stmt.bindString(4, repeatStrategy);
        }
        stmt.bindLong(5, entity.getRepeatCount());
 
        java.util.Date lastCompletedDate = entity.getLastCompletedDate();
        if (lastCompletedDate != null) {
            stmt.bindLong(6, lastCompletedDate.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RepeatTaskInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String taskIdStr = entity.getTaskIdStr();
        if (taskIdStr != null) {
            stmt.bindString(2, taskIdStr);
        }
 
        RepeatMode repeatMode = entity.getRepeatMode();
        if (repeatMode != null) {
            stmt.bindLong(3, repeatModeConverter.convertToDatabaseValue(repeatMode));
        }
 
        String repeatStrategy = entity.getRepeatStrategy();
        if (repeatStrategy != null) {
            stmt.bindString(4, repeatStrategy);
        }
        stmt.bindLong(5, entity.getRepeatCount());
 
        java.util.Date lastCompletedDate = entity.getLastCompletedDate();
        if (lastCompletedDate != null) {
            stmt.bindLong(6, lastCompletedDate.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RepeatTaskInfo readEntity(Cursor cursor, int offset) {
        RepeatTaskInfo entity = new RepeatTaskInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // taskIdStr
            cursor.isNull(offset + 2) ? null : repeatModeConverter.convertToEntityProperty(cursor.getInt(offset + 2)), // repeatMode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // repeatStrategy
            cursor.getLong(offset + 4), // repeatCount
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)) // lastCompletedDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RepeatTaskInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTaskIdStr(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRepeatMode(cursor.isNull(offset + 2) ? null : repeatModeConverter.convertToEntityProperty(cursor.getInt(offset + 2)));
        entity.setRepeatStrategy(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRepeatCount(cursor.getLong(offset + 4));
        entity.setLastCompletedDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RepeatTaskInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RepeatTaskInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RepeatTaskInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
