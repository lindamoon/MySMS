package com.lixb.mysms.db.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.lixb.mysms.entity.TaskComment;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASK_COMMENT".
*/
public class TaskCommentDao extends AbstractDao<TaskComment, Long> {

    public static final String TABLENAME = "TASK_COMMENT";

    /**
     * Properties of entity TaskComment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TaskIdStr = new Property(1, String.class, "taskIdStr", false, "TASK_ID_STR");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property CommentDate = new Property(3, java.util.Date.class, "commentDate", false, "COMMENT_DATE");
    }

    private Query<TaskComment> task_CommentsQuery;

    public TaskCommentDao(DaoConfig config) {
        super(config);
    }
    
    public TaskCommentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK_COMMENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TASK_ID_STR\" TEXT," + // 1: taskIdStr
                "\"CONTENT\" TEXT," + // 2: content
                "\"COMMENT_DATE\" INTEGER);"); // 3: commentDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK_COMMENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TaskComment entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String taskIdStr = entity.getTaskIdStr();
        if (taskIdStr != null) {
            stmt.bindString(2, taskIdStr);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        java.util.Date commentDate = entity.getCommentDate();
        if (commentDate != null) {
            stmt.bindLong(4, commentDate.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TaskComment entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String taskIdStr = entity.getTaskIdStr();
        if (taskIdStr != null) {
            stmt.bindString(2, taskIdStr);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        java.util.Date commentDate = entity.getCommentDate();
        if (commentDate != null) {
            stmt.bindLong(4, commentDate.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TaskComment readEntity(Cursor cursor, int offset) {
        TaskComment entity = new TaskComment( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // taskIdStr
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)) // commentDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TaskComment entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTaskIdStr(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCommentDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TaskComment entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TaskComment entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TaskComment entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "comments" to-many relationship of Task. */
    public List<TaskComment> _queryTask_Comments(String taskIdStr) {
        synchronized (this) {
            if (task_CommentsQuery == null) {
                QueryBuilder<TaskComment> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TaskIdStr.eq(null));
                queryBuilder.orderRaw("T.'COMMENT_DATE' DESC");
                task_CommentsQuery = queryBuilder.build();
            }
        }
        Query<TaskComment> query = task_CommentsQuery.forCurrentThread();
        query.setParameter(0, taskIdStr);
        return query.list();
    }

}
